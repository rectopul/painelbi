import { Injectable } from '@nestjs/common';
import { UpdatePlanilhaDto } from './dto/update-planilha.dto';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import * as fs from 'fs'
import { promisify } from 'util'
import { PrismaService } from 'src/database/prisma.service';
import { PlanilhaResume } from '@prisma/client';
import { CreatePlanilhaDto, QueriesDTO } from './dto/create-planilha.dto';

@Injectable()
export class PlanilhaService {
  private readFileAsync: Function;

  constructor(
    private readonly prisma: PrismaService
  ) {
    this.readFileAsync = promisify(fs.readFile);
  }

  async create(createPlanilhaDto: CreatePlanilhaDto) {
    try {

      const serviceAccountAuth = new JWT({
        // env var values here are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
        key: process.env.GOOGLE_PRIVATE_KEY,
        scopes: [
          'https://www.googleapis.com/auth/spreadsheets',
        ],
      });

      const docId = `1gXhJkrbxskWeKKKclvBB0yfCOMbnZm7aw0B5Erg5_3E`
      const doc = new GoogleSpreadsheet(docId, serviceAccountAuth)

      await doc.loadInfo()

      const values = [Object.values(createPlanilhaDto)]

      const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
      const rows = await sheet.addRows(values)

      let retorno;

      // Adicionar um identificador único a cada linha (por exemplo, um UUID)
      for (const row of rows) {
        retorno = row.toObject()
      }

      return retorno;

    } catch (error) {
      throw new Error(error?.message || error?.error)
    }
  }

  async refresh() {
    try {

      const serviceAccountAuth = new JWT({
        // env var values here are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
        key: process.env.GOOGLE_PRIVATE_KEY,
        scopes: [
          'https://www.googleapis.com/auth/spreadsheets',
        ],
      });

      const docId = `1gXhJkrbxskWeKKKclvBB0yfCOMbnZm7aw0B5Erg5_3E`
      const doc = new GoogleSpreadsheet(docId, serviceAccountAuth)

      await doc.loadInfo()

      const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
      const rows = await sheet.getRows()

      const dados: CreatePlanilhaDto[] = rows.map(r => {
        const valores: CreatePlanilhaDto = {
          data: r.get('DATA') as string,
          data_hora: r.get('DATA E HORA') as string,
          nome_status: r.get('Nome do status') as string,
          utm_medium: r.get('UTM MEDIUM') as string,
          status_produto: r.get('Status do produto') as string,
          alias_produto: r.get('Alias do Produto') as string,
          numero_pedido: r.get('Numero do pedido') as string,
          valor_c_desconto: r.get('Valor pago com desconto') as string,
          desconto: r.get('Desconto') as string,
          utm_source: r.get('UTM SOURCE') as string,
          utm_campaign: r.get('UTM CAMPAIGN') as string,
          utm_content: r.get('UTM CONTENT') as string,
          utm_id: r.get('UTM ID') as string,
          utm_term: r.get('UTM TERM') as string,
          utm_rede: r.get('UTM REDE') as string,
          nome_completo: r.get('Nome completo') as string,
          email: r.get('Email') as string,
          cpf: r.get('CPF') as string,
          celular: r.get('Celular') as string,
          link_whatsapp: r.get('Link Whatsapp') as string,
          ip: r.get('IP') as string,
          cep: r.get('CEP') as string,
          rua: r.get('Rua') as string,
          numero: r.get('Numero') as string,
          cidade: r.get('Cidade') as string,
          estado: r.get('Estado') as string,
          pais: r.get('Pais') as string,
          cupom_desconto: r.get('Cupom de desconto') as string,
          qtd_parcelado: r.get('Quantas vezes parcelado') as string,
          valor_parcela: r.get('Valor da parcela') as string,
          numero_cartao: r.get('Numero do cartão') as string,
          nome_cartao: r.get('Nome do cartão') as string,
          cpf_cartao: r.get('CPF usado no cartão') as string,
          forma_pagamento: r.get('Forma de pagamento') as string,
          codigo_produto: r.get('CODIGO DO PRODUTO')
        }


        return valores
      })

      //Percorrer os dados e fazer o upinsert

      for (const dado of dados) {
        const checkIsExist = await this.prisma.planilhaResume.findFirst({
          where: {
            data_hora: dado.data_hora,
            data: dado.data,
            nome_status: dado.nome_status,
            utm_source: dado.utm_source,
            utm_medium: dado.utm_medium,
            ip: dado.ip,
            utm_campaign: dado.utm_campaign,
            cpf: dado.cpf,
            status_produto: dado.status_produto,
          }
        })

        if (!checkIsExist) {
          await this.prisma.planilhaResume.create({ data: dado })
        }
      }

      const resume = await this.prisma.planilhaResume.findMany()


      return resume
    } catch (error) {
      throw new Error(error?.message || error?.error)
    }
  }

  async findAll(query?: QueriesDTO) {
    try {

      const data = await this.prisma.planilhaResume.findMany({ where: query })

      return data
    } catch (error) {
      throw new Error(error?.message || error?.error)
    }

  }

  findOne(id: number) {
    return `This action returns a #${id} planilha`;
  }

  update(id: number, updatePlanilhaDto: UpdatePlanilhaDto) {
    return `This action updates a #${id} planilha`;
  }

  remove(id: number) {
    return `This action removes a #${id} planilha`;
  }
}
